openapi: 3.1.0
info:
  title: Maahita Backend API Services
  version: 0.0.0
tags:
  - name: Sessions
  - name: Classes
  - name: Schools
paths:
  /api/v1/classes:
    get:
      operationId: Classes_list
      description: List classes
      parameters: []
      responses:
        '200':
          description: Response for a successful list of sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '429':
          description: Response for rate limiting errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
      tags:
        - Classes
      security:
        - BearerAuth: []
    post:
      operationId: Classes_create
      description: Create a class
      parameters: []
      responses:
        '202':
          description: Response for a successful session acceptance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '409':
          description: Response for session conflict errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Classes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      security:
        - BearerAuth: []
  /api/v1/classes/{classId}:
    get:
      operationId: Classes_read
      description: Read class
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '429':
          description: Response for rate limiting errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
      tags:
        - Classes
      security:
        - BearerAuth: []
    put:
      operationId: Classes_update
      description: Update a class
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Classes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      security:
        - BearerAuth: []
    delete:
      operationId: Classes_delete
      description: Delete a class
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Classes
      security:
        - BearerAuth: []
  /api/v1/schools:
    get:
      operationId: Schools_list
      description: List schools
      parameters: []
      responses:
        '200':
          description: Response for a successful list of sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/School'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '429':
          description: Response for rate limiting errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
      tags:
        - Schools
      security:
        - BearerAuth: []
    post:
      operationId: Schools_create
      description: Create a class
      parameters: []
      responses:
        '202':
          description: Response for a successful session acceptance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '409':
          description: Response for session conflict errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Schools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
      security:
        - BearerAuth: []
  /api/v1/schools/{schoolId}:
    get:
      operationId: Schools_read
      description: Read school
      parameters:
        - name: schoolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '429':
          description: Response for rate limiting errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
      tags:
        - Schools
      security:
        - BearerAuth: []
    put:
      operationId: Schools_update
      description: Update a class
      parameters:
        - name: schoolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response for a successful session update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Schools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
      security:
        - BearerAuth: []
    delete:
      operationId: Schools_delete
      description: Delete a class
      parameters:
        - name: schoolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Schools
      security:
        - BearerAuth: []
  /api/v1/sessions:
    get:
      operationId: Sessions_list
      description: List all sessions
      parameters: []
      responses:
        '200':
          description: Response for a successful list of sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '429':
          description: Response for rate limiting errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
      tags:
        - Sessions
      security:
        - BearerAuth: []
    post:
      operationId: Sessions_create
      description: Create a new session
      parameters: []
      responses:
        '202':
          description: Response for a successful session acceptance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '409':
          description: Response for session conflict errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      security:
        - BearerAuth: []
  /api/v1/sessions/{classId}:
    delete:
      operationId: Sessions_delete
      description: Delete a session
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Sessions
      security:
        - BearerAuth: []
  /api/v1/sessions/{sessionId}:
    put:
      operationId: Sessions_update
      description: End an existing session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      security:
        - BearerAuth: []
    get:
      operationId: Sessions_getSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Sessions
      security:
        - BearerAuth: []
  /api/v1/sessions/{sessionId}/participants/{participantId}:
    put:
      operationId: Sessions_updateParticipantStatus
      description: Update participant status in a session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: participantId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionParticipant'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean
              required:
                - status
      security:
        - BearerAuth: []
    post:
      operationId: Sessions_addParticipant
      description: Add a participant to a session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: participantId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Response for a successful session fetch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionParticipant'
        '400':
          description: Response for session validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Response for unauthorized session access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Response when a session is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Response for internal server errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean
              required:
                - status
      security:
        - BearerAuth: []
components:
  schemas:
    Address:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
      examples:
        - street: 123 Main St
          city: Anytown
          state: CA
          zipCode: '12345'
    Class:
      type: object
      required:
        - id
        - name
        - subject
        - schoolId
        - location
        - studentsCount
        - curriculumProgress
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        schoolId:
          type: string
        location:
          $ref: '#/components/schemas/Address'
        studentsCount:
          type: integer
          format: int32
        curriculumProgress:
          type: integer
          format: int32
      examples:
        - id: '123456'
          name: Math 101
          subject: Mathematics
          schoolId: school-123
          location:
            street: 123 Main St
            city: Srikakulam
            state: Andhra Pradesh
            zipCode: '12345'
          studentsCount: 30
          curriculumProgress: 75
    DateTime:
      type: string
      format: date-time
    DeliveryMode:
      type: string
      enum:
        - in-person
        - online
        - hybrid
    InternalServerError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - INTERNAL_SERVER_ERROR
        message:
          type: string
    NotFoundError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - NOT_FOUND
        message:
          type: string
    Participant:
      type: object
      required:
        - id
        - name
        - isTeacher
        - color
        - initials
      properties:
        id:
          type: string
        name:
          type: string
        isTeacher:
          type: boolean
        color:
          type: string
        initials:
          type: string
      examples:
        - id: participant-123
          name: John Doe
          isTeacher: true
          color: '#FF5733'
          initials: JD
    RateLimitError:
      type: object
      required:
        - code
        - message
        - retryAfter
      properties:
        code:
          type: string
          enum:
            - RATE_LIMIT_ERROR
        message:
          type: string
        retryAfter:
          type: integer
          format: int16
    School:
      type: object
      required:
        - id
        - name
        - address
        - contactNumber
        - email
      properties:
        id:
          type: string
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        contactNumber:
          type: string
        email:
          type: string
      examples:
        - id: school-123
          name: ABC High School
          address:
            street: 456 Elm St
            city: Anytown
            state: CA
            zipCode: '67890'
          contactNumber: 123-456-7890
          email: info@abchighschool.edu
    Session:
      type: object
      required:
        - id
        - classId
        - startedAt
        - deliveryMode
      properties:
        id:
          type: string
        classId:
          type: integer
          format: int32
        startedAt:
          $ref: '#/components/schemas/DateTime'
        endedAt:
          $ref: '#/components/schemas/DateTime'
        duration:
          type: integer
          format: int32
        deliveryMode:
          $ref: '#/components/schemas/DeliveryMode'
      examples:
        - id: session-123
          classId: 123456
          startedAt: 2025-05-24T13:30
          endedAt: 2025-05-24T14:30
          duration: 60
          deliveryMode: online
    SessionParticipant:
      type: object
      required:
        - sessionId
        - participantId
        - updatedParticipant
      properties:
        sessionId:
          type: string
        participantId:
          type: string
        updatedParticipant:
          $ref: '#/components/schemas/Participant'
      examples:
        - sessionId: session-123
          participantId: participant-123
          updatedParticipant:
            id: participant-123
            name: John Doe
            isTeacher: true
            color: '#FF5733'
            initials: JD
    UnauthorizedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - UN_AUTHORIZED_ERROR
        message:
          type: string
    ValidationError:
      type: object
      required:
        - code
        - message
        - details
      properties:
        code:
          type: string
          enum:
            - VALIDATION_ERROR
        message:
          type: string
        details:
          type: array
          items:
            type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
